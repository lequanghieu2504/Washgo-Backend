version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: washgo_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: washgo
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - washgo_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Spring Boot Backend
  backend:
    build: .
    container_name: washgo_backend
    restart: unless-stopped
    environment:
      # Database Configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/washgo
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password
      
      # JWT Configuration
      JWT_CURRENT_SECRET: "G3BRkHrdRXmhc4CY++yAdBe77o9F9whOX+gYMe8SYrU="
      
      # JPA Configuration
      SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop
      SPRING_JPA_SHOW_SQL: "false"
      
      # File Storage
      FILE_STORAGE_ROOT: /app/uploads
      
      # Server Configuration
      SERVER_PORT: 8080
    ports:
      - "8080:8080"
    volumes:
      - backend_uploads:/app/uploads
    depends_on:
      - db
    networks:
      - washgo_network

  # React Frontend
  frontend:
    build: 
      context: ../washgo-frontend
      dockerfile: Dockerfile
    container_name: washgo_frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - washgo_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: washgo_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@washgo.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      db:
        condition: service_healthy
    networks:
      - washgo_network
    profiles:
      - tools  # Use 'docker-compose --profile tools up' to include this service

volumes:
  db_data:
    driver: local
  backend_uploads:
    driver: local
  pgadmin_data:
    driver: local

networks:
  washgo_network:
    driver: bridge
